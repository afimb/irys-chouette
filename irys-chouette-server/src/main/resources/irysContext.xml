<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
   xmlns:sws="http://www.springframework.org/schema/web-services"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
   default-init-method="init" xmlns:aop="http://www.springframework.org/schema/aop" default-autowire="no">


   <bean id="realTimeDataSource" class="fr.certu.chouette.dao.ChouetteDriverManagerDataSource">
      <property name="driverClassName" value="${siri.jdbc.driver}" />
      <property name="url" value="${siri.jdbc.url}" />
      <property name="username" value="${siri.jdbc.username}" />
      <property name="password" value="${siri.jdbc.password}" />
      <property name="databaseSchema" value="${siri.schema}" />
   </bean>

   <bean id="realTimeDao" class="irys.siri.chouette.server.model.RealTimeDao">
      <property name="dataSource" ref="realTimeDataSource" /> <!-- may be different -->
      <property name="datedCallRequest"
         value="
      SELECT dc.stop_Point_Id, dc.last_modification_date as dc_last_mod_date, dc.departure_status,dc.arrival_status, dc.position, dc.expected_arrival_time, 
      dc.expected_departure_time, dc.aimed_arrival_time,dc.is_Departure,dc.is_Arrival,dc.dated_vehicle_journey_id,
      dc.aimed_departure_time, dvj.id as dvj_id, dvj.last_modification_date as dvj_last_mod_date ,dvj.line_Id, dvj.route_Id, dvj.journey_pattern_id, dvj.vehicle_journey_id,
      dvj.objectid,dvj.published_journey_name,dvj.published_journey_identifier,dvj.transport_mode,dvj.vehicle_type_identifier,
      dvj.status_value,dvj.number,dvj.comment,dvj.company_id,dvj.service_order,
      v.id as vehicle_id,v.last_modification_date as v_last_mod_date, v.vehicle_type_identifier,v.status_value as vehicle_status, v.objectid as vehicle_objectid,
      v.in_congestion,v.in_panic,v.longitude,v.latitude,v.long_lat_type,v.x,v.y,
      v.projection_type,v.is_monitored,v.monitoring_error,v.bearing,v.delay
      from ${siri.schema}.dated_calls dc 
      join ${siri.schema}.dated_vehicle_journeys dvj on (dc.dated_vehicle_journey_id = dvj.id) 
      left join ${siri.schema}.vehicles v on (dvj.id = v.current_vehicle_journey_id)
      where dvj.application_date = :date 
      " />
      <property name="datedCallMonitoringRefFilter" value=" and dc.stop_point_id in (:stopPoints)" />
      <property name="datedCallDepartureStartHourFilterRequest" value=" and dc.expected_departure_time &gt;= :startTime" />
      <property name="datedCallArrivalStartHourFilterRequest" value=" and dc.expected_arrival_time &gt;= :startTime" />
      <property name="datedCallDeparturePreviewIntervalFilterRequest" value=" and dc.expected_departure_time &lt;= :endTime" />
      <property name="datedCallArrivalPreviewIntervalFilterRequest" value=" and dc.expected_arrival_time &lt;= :endTime" />
      <property name="datedCallLineFilterRequest" value=" and dvj.line_id = :line" />
      <property name="datedCallDestinationFilterRequest"
         value=" 
      and dvj.id in (select dvj2.id from ${siri.schema}.dated_vehicle_journeys dvj2, ${siri.schema}.dated_calls dc2 
      where dvj2.id = dc2.dated_vehicle_journey_id and dc2.stop_point_id in (:destinations) )" />
      <property name="datedCallOperatorFilterRequest" value=" and dvj.company_id = :operator" />
      <property name="datedCallDepartureOrderByRequest" value=" order by dc.expected_departure_time asc" />
      <property name="datedCallArrivalOrderByRequest" value=" order by dc.expected_arrival_time asc" />

      <property name="singleDatedCallRequest"
         value="
      SELECT dc.stop_Point_Id, dc.last_modification_date as dc_last_mod_date, dc.departure_status, dc.arrival_status, dc.position, 
      dc.expected_arrival_time, dc.expected_departure_time, dc.aimed_arrival_time,dc.is_Departure,dc.is_Arrival,dc.dated_vehicle_journey_id,
      dc.aimed_departure_time from ${siri.schema}.dated_calls dc where dc.stop_Point_Id = :stopPoint and dc.dated_vehicle_journey_id = :vehicleJourney
      " />

      <property name="onwardDatedCallRequest"
         value="
      SELECT dc.stop_Point_Id, dc.last_modification_date as dc_last_mod_date, dc.departure_status, dc.arrival_status, dc.position, dc.expected_arrival_time, 
      dc.expected_departure_time, dc.aimed_arrival_time,dc.is_Departure,dc.is_Arrival,dc.dated_vehicle_journey_id,
      dc.aimed_departure_time from ${siri.schema}.dated_calls dc where dc.position > :position and dc.dated_vehicle_journey_id = :vehicleJourney order by dc.position asc
      " />
      
      <property name="originDestinationDatedCallRequest"
         value="
      SELECT dc.stop_Point_Id, dc.last_modification_date as dc_last_mod_date,  dc.departure_status, dc.arrival_status, dc.position, dc.expected_arrival_time, 
      dc.expected_departure_time, dc.aimed_arrival_time,dc.is_Departure,dc.is_Arrival,dc.dated_vehicle_journey_id,
      dc.aimed_departure_time from ${siri.schema}.dated_calls dc where dc.dated_vehicle_journey_id in (:vehicleJourneyIds) order by dc.dated_vehicle_journey_id asc
      " />

      <property name="generalMessageRequest"
         value="
      SELECT gm.id,gm.info_channel,gm.version,gm.creation_date,gm.last_modification_date,
             gm.valid_until_date,gm.status,gm.objectid,
             gl.line_id,gs.stop_area_id,m.type,m.language,m.text
      FROM ${siri.schema}.general_messages gm 
      LEFT JOIN ${siri.schema}.general_message_lines gl on (gl.general_message_id = gm.id)
      LEFT JOIN ${siri.schema}.general_message_stop_areas gs on (gs.general_message_id = gm.id)
      LEFT JOIN ${siri.schema}.general_message_messages m on (m.general_message_id = gm.id)
      WHERE NOT (gm.status = 'CANCELED') 
      AND ( gm.valid_until_date IS NULL OR gm.valid_until_date &gt; :date )
      " />
      <property name="generalMessageChannelFilterRequest" value="
      AND gm.info_channel in (:channels)
      " />
      <property name="generalMessageLangFilterRequest" value="
      AND m.language = :lang
      " />
      <property name="generalMessageLineFilterRequest" value="
      gl.line_id in (:lines)
      " />
      <property name="generalMessageStopAreaFilterRequest" value="
      gs.stop_area_id in (:stops)
      " />


   </bean>

   <bean id="generalMessage" name="generalMessage" class="irys.siri.chouette.server.producer.ChouetteGeneralMessageService">
      <property name="chouetteTool" ref="siriTool" />
      <property name="siriTool" ref="siriTool" />
      <property name="referential" ref="referential" />
      <property name="realTimeDao" ref="realTimeDao" />
      <property name="gmEncoded" value="${siri.generalmessage.encoded}" />
      <property name="defaultLang" value="${siri.generalmessage.defaultLang}" />
      <property name="validLanguages" value="${siri.generalmessage.langs}" />
      <property name="validChannels" value="${siri.generalmessage.channels}" />
      <property name="formatRef" value="${siri.generalmessage.formatRef}" />
   </bean>

   <bean id="stopMonitoring" name="stopMonitoring" class="irys.siri.chouette.server.producer.ChouetteStopMonitoringService">
      <property name="chouetteTool" ref="siriTool" />
      <property name="siriTool" ref="siriTool" />
      <property name="referential" ref="referential" />
      <property name="realTimeDao" ref="realTimeDao" />
      <property name="delayedGap" value="${siri.stopmonitoring.delayedGap}" />
      <property name="earlyGap" value="${siri.stopmonitoring.earlyGap}" />
      <property name="stopIdSubType" value="${siri.stopmonitoring.stopPointType}" />
      <property name="terminusIdSubType" value="${siri.stopmonitoring.originDestinationPointType}" />
      <property name="monitoringIdSubType" value="RequestedRef" />
   </bean>

   <bean id="discovery" name="discovery" class="irys.siri.chouette.server.producer.ChouetteDiscoveryService">
      <property name="chouetteTool" ref="siriTool" />
      <property name="siriTool" ref="siriTool" />
      <property name="referential" ref="referential" />
   </bean>

   <bean id="checkStatus" name="checkStatus" class="irys.siri.chouette.server.producer.ChouetteCheckStatusService">
      <property name="siriTool" ref="siriTool" />
      <property name="realTimeDao" ref="realTimeDao" />
   </bean>



</beans>