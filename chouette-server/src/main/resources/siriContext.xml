<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
   xmlns:sws="http://www.springframework.org/schema/web-services"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
   default-init-method="init" xmlns:aop="http://www.springframework.org/schema/aop" default-autowire="no">

   <!-- specific objects for chouette -->
   <bean id="siriTool" name="siriTool" class="net.dryade.siri.chouette.server.producer.ChouetteTool">
      <property name="boardingPositionWithLoc" value="${siri.idWithLoc.StopPoint.BP}" />
      <property name="companyWithLoc" value="${siri.idWithLoc.Company}" />
      <property name="journeyPatternWithLoc" value="${siri.idWithLoc.JourneyPattern}" />
      <property name="lineWithLoc" value="${siri.idWithLoc.Line}" />
      <property name="networkWithLoc" value="${siri.idWithLoc.Network}" />
      <property name="quayWithLoc" value="${siri.idWithLoc.StopPoint.QUAY}" />
      <property name="routeWithLoc" value="${siri.idWithLoc.Route}" />
      <property name="stopPlaceWithLoc" value="${siri.idWithLoc.StopPoint.SP}" />
      <property name="stopPointOnRouteWithLoc" value="${siri.idWithLoc.StopPoint.SPOR}" />
      <property name="vehicleJourneyWithLoc" value="${siri.idWithLoc.VehicleJourney}" />
      <property name="types" value="${siri.allowedStopPointTypes}" />
   </bean>


   <bean id="referential" name="referential" class="net.dryade.siri.chouette.server.model.Referential">
      <property name="lineManager" ref="lineManager" />
      <property name="siriTool" ref="siriTool" />
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>

   <bean id="realTimeDataSource" class="fr.certu.chouette.dao.ChouetteDriverManagerDataSource">
      <property name="driverClassName" value="${siri.jdbc.driver}" />
      <property name="url" value="${siri.jdbc.url}" />
      <property name="username" value="${siri.jdbc.username}" />
      <property name="password" value="${siri.jdbc.password}" />
      <property name="databaseSchema" value="${siri.schema}" />
   </bean>

   <bean id="realTimeDao" class="net.dryade.siri.chouette.server.model.RealTimeDao">
      <property name="dataSource" ref="realTimeDataSource" /> <!-- may be different -->
      <property name="datedCallRequest"
         value="
      SELECT dc.stopPointId, dc.status, dc.position, dc.expectedarrivaltime, dc.expecteddeparturetime, dc.aimedarrivaltime,
      dc.aimeddeparturetime, dvj.id as dvjid, dvj.lineId, dvj.routeId, dvj.journeypatternid, dvj.vehiclejourneyid,
      dvj.objectid,dvj.publishedjourneyname,dvj.publishedjourneyidentifier,dvj.transportmode,dvj.vehicletypeidentifier,
      dvj.statusvalue,dvj.number,dvj.comment,dvj.companyid,dvj.serviceorder,
      v.id as vehicleid,v.vehicletypeidentifier,v.statusvalue as vehiclestatus, v.incongestion,v.inpanic,v.longitude,v.latitude,v.x,v.y,
      v.projectiontype,v.ismonitored,v.monitoringerror,v.bearing,v.delay
      from ${siri.schema}.datedcall dc 
      join ${siri.schema}.datedvehiclejourney dvj on (dc.datedvehiclejourneyid = dvj.id) 
      left join ${siri.schema}.vehicleservice vs on (dvj.serviceid = vs.id)
      left join ${siri.schema}.vehicle v on (vs.vehicleid = v.id)
      where dvj.date = :date 
      " />
      <property name="datedCallMonitoringRefFilter" value=" and dc.stoppointid in (:stopPoints)" />
      <property name="datedCallDepartureStartHourFilterRequest" value=" and dc.expecteddeparturetime &gt;= :startTime" />
      <property name="datedCallArrivalStartHourFilterRequest" value=" and dc.expectedarrivaltime &gt;= :startTime" />
      <property name="datedCallDeparturePreviewIntervalFilterRequest" value=" and dc.expecteddeparturetime &lt;= :endTime" />
      <property name="datedCallArrivalPreviewIntervalFilterRequest" value=" and dc.expectedarrivaltime &lt;= :endTime" />
      <property name="datedCallLineFilterRequest" value=" and dvj.lineid = :line" />
      <property name="datedCallDestinationFilterRequest"
         value=" 
      and dvj.id in (select dvj2.id from ${siri.schema}.datedvehiclejourney dvj2, ${siri.schema}.datedcall dc2 where dvj2.id = dc2.datedvehiclejourneyid and dc2.stoppointid in (:destinations)" />
      <property name="datedCallOperatorFilterRequest" value=" and dvj.companyid = :operator" />
      <property name="datedCallDepartureOrderByRequest" value=" order by dc.expecteddeparturetime asc" />
      <property name="datedCallArrivalOrderByRequest" value=" order by dc.expectedarrivaltime asc" />

      <property name="singleDatedCallRequest"
         value="
      SELECT dc.stopPointId, dc.status, dc.position, dc.expectedarrivaltime, dc.expecteddeparturetime, dc.aimedarrivaltime,
      dc.aimeddeparturetime from ${siri.schema}.datedcall dc where dc.stopPointId = :stopPoint and dc.datedvehiclejourneyid = :vehicleJourney
      " />

      <property name="onwardDatedCallRequest"
         value="
      SELECT dc.stopPointId, dc.status, dc.position, dc.expectedarrivaltime, dc.expecteddeparturetime, dc.aimedarrivaltime,
      dc.aimeddeparturetime from ${siri.schema}.datedcall dc where dc.position > :position and dc.datedvehiclejourneyid = :vehicleJourney order by dc.position asc
      " />

      <property name="generalMessageRequest"
         value="
      SELECT gm.id,gm.infochannel,gm.version,gm.creation_date,gm.last_modification_date,
             gm.valid_until_date,gm.status,gm.objectid,
             gl.line_id,gs.stoparea_id,m.type,m.language,m.text
      FROM ${siri.schema}.general_message gm 
      LEFT JOIN ${siri.schema}.gm_lines gl on (gl.gm_id = gm.id)
      LEFT JOIN ${siri.schema}.gm_stopareas gs on (gs.gm_id = gm.id)
      LEFT JOIN ${siri.schema}.gm_message m on (m.gm_id = gm.id)
      WHERE NOT (gm.status = 'CANCELED') 
      AND ( gm.valid_until_date IS NULL OR gm.valid_until_date &gt; :date )
      " />
      <property name="generalMessageChannelFilterRequest" value="
      AND gm.infochannel in (:channels)
      " />
      <property name="generalMessageLangFilterRequest" value="
      AND m.language = :lang
      " />
      <property name="generalMessageLineFilterRequest" value="
      gl.line_id in (:lines)
      " />
      <property name="generalMessageStopAreaFilterRequest" value="
      gs.stoparea_id in (:stops)
      " />


   </bean>

   <bean id="generalMessage" name="generalMessage" class="net.dryade.siri.chouette.server.producer.ChouetteGeneralMessageService">
      <property name="chouetteTool" ref="siriTool" />
      <property name="siriTool" ref="siriTool" />
      <property name="referential" ref="referential" />
      <property name="realTimeDao" ref="realTimeDao" />
      <property name="gmEncoded" value="${siri.generalmessage.encoded}" />
      <property name="defaultLang" value="${siri.generalmessage.defaultLang}" />
      <property name="validLanguages" value="${siri.generalmessage.langs}" />
      <property name="validChannels" value="${siri.generalmessage.channels}" />
      <property name="formatRef" value="${siri.generalmessage.formatRef}" />
   </bean>

   <bean id="stopMonitoring" name="stopMonitoring" class="net.dryade.siri.chouette.server.producer.ChouetteStopMonitoringService">
      <property name="chouetteTool" ref="siriTool" />
      <property name="siriTool" ref="siriTool" />
      <property name="referential" ref="referential" />
      <property name="realTimeDao" ref="realTimeDao" />
      <property name="delayedGap" value="${siri.stopmonitoring.delayedGap}" />
      <property name="earlyGap" value="${siri.stopmonitoring.earlyGap}" />
   </bean>




</beans>